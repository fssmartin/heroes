{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nclass HeroService {\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroes = [];\n    this.heroess = [];\n    this.heroesUrl = 'https://jsonplaceholder.typicode.com/users';\n    //this.heroes = HEROES; \n  }\n\n  getHeroe(id) {\n    return of(this.heroess.find(item => item.id == id));\n  }\n  getHeroes(mesage) {\n    //    this.messageService.addMessage(mesage + \": fetched heroes\");\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.messageService.addMessage(mesage + ' http')), catchError(this.handleError('getHeroes', [])));\n    //return of(this.heroes);\n  }\n\n  getIdLastHeroe() {\n    return of(this.heroess[this.heroess.length - 1].id + 1);\n  }\n  deleteHeroe(id) {\n    this.messageService.addMessage(\"-- Delete Hero id:\" + id + \" Ok\");\n    return of(this.heroess = this.heroess.filter(heroe => heroe.id != id));\n  }\n  addHeroe(hero) {\n    this.messageService.addMessage(\"-- Add Hero id:\" + hero.id + \" Ok\");\n    return of(this.heroess.push(hero));\n  }\n  updateHeroe(hero) {\n    return of(this.heroes.map(myhero => {\n      if (myhero.id === hero.id) {\n        this.messageService.addMessage(\"-- Update Hero id:\" + myhero.id + \" Ok\");\n        myhero.name = hero.name;\n      }\n      ;\n    }));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      //console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n      this.messageService.addMessage(`-- ${operation} -- failed: \\n\\n ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});\nexport { HeroService };","map":{"version":3,"names":["of","catchError","tap","HeroService","constructor","messageService","http","heroes","heroess","heroesUrl","getHeroe","id","find","item","getHeroes","mesage","get","pipe","_","addMessage","handleError","getIdLastHeroe","length","deleteHeroe","filter","heroe","addHeroe","hero","push","updateHeroe","map","myhero","name","operation","result","error","message","i0","ɵɵinject","i1","MessageService","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\CURSOS\\MIO\\Angular\\my-app\\src\\app\\services\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Hero, Heroo } from '../moduls/hero.interface';\nimport { HEROES } from '../moduls/mock-heroes';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  heroes:Hero[]=[];\n  heroess:Heroo[]=[];  \n  private heroesUrl = 'https://jsonplaceholder.typicode.com/users';\n  \n\n  constructor(\n      private messageService:MessageService,\n      private http: HttpClient) { \n      //this.heroes = HEROES; \n  }\n\n  getHeroe(id:number):Observable<any> { \n    return of(this.heroess.find(item=>item.id == id));\n  }\n\n  getHeroes(mesage:string):Observable<Heroo[]>{\n//    this.messageService.addMessage(mesage + \": fetched heroes\");\n    return this.http.get<Heroo[]>(this.heroesUrl).pipe(\n      tap(_ => this.messageService.addMessage(mesage + ' http') ),      \n      catchError(this.handleError<Heroo[]>('getHeroes', []))\n    );\n    //return of(this.heroes);\n  }\n\n  getIdLastHeroe():Observable<number>{\n    return of( this.heroess[this.heroess.length-1].id + 1 );\n  }  \n\n  deleteHeroe(id:number):Observable<Heroo[]>{\n    this.messageService.addMessage(\"-- Delete Hero id:\" + id + \" Ok\");\n    return  of(this.heroess = this.heroess.filter(heroe => heroe.id != id));\n  }\n\n  addHeroe(hero:Heroo):Observable<any>{\n    this.messageService.addMessage(\"-- Add Hero id:\" + hero.id + \" Ok\");     \n    return  of( this.heroess.push(hero) );\n  }\n\n  updateHeroe(hero:Hero):Observable<void[]>{\n    return  of(this.heroes.map(\n      (myhero)=>{\n        if(myhero.id === hero.id){\n            this.messageService.addMessage(\"-- Update Hero id:\" + myhero.id + \" Ok\");\n            myhero.name = hero.name\n          };\n        }    \n      )\n    );    \n  }  \n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n  \n      // TODO: send the error to remote logging infrastructure\n      //console.error(error); // log to console instead\n  \n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n      this.messageService.addMessage(`-- ${operation} -- failed: \\n\\n ${error.message}`);\n  \n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n"],"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAIrD,MAGaC,WAAW;EAOtBC,YACYC,cAA6B,EAC7BC,IAAgB;IADhB,KAAAD,cAAc,GAAdA,cAAc;IACd,KAAAC,IAAI,GAAJA,IAAI;IAPhB,KAAAC,MAAM,GAAQ,EAAE;IAChB,KAAAC,OAAO,GAAS,EAAE;IACV,KAAAC,SAAS,GAAG,4CAA4C;IAM5D;EACJ;;EAEAC,QAAQA,CAACC,EAAS;IAChB,OAAOX,EAAE,CAAC,IAAI,CAACQ,OAAO,CAACI,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACF,EAAE,IAAIA,EAAE,CAAC,CAAC;EACnD;EAEAG,SAASA,CAACC,MAAa;IACzB;IACI,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAU,IAAI,CAACP,SAAS,CAAC,CAACQ,IAAI,CAChDf,GAAG,CAACgB,CAAC,IAAI,IAAI,CAACb,cAAc,CAACc,UAAU,CAACJ,MAAM,GAAG,OAAO,CAAC,CAAE,EAC3Dd,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAU,WAAW,EAAE,EAAE,CAAC,CAAC,CACvD;IACD;EACF;;EAEAC,cAAcA,CAAA;IACZ,OAAOrB,EAAE,CAAE,IAAI,CAACQ,OAAO,CAAC,IAAI,CAACA,OAAO,CAACc,MAAM,GAAC,CAAC,CAAC,CAACX,EAAE,GAAG,CAAC,CAAE;EACzD;EAEAY,WAAWA,CAACZ,EAAS;IACnB,IAAI,CAACN,cAAc,CAACc,UAAU,CAAC,oBAAoB,GAAGR,EAAE,GAAG,KAAK,CAAC;IACjE,OAAQX,EAAE,CAAC,IAAI,CAACQ,OAAO,GAAG,IAAI,CAACA,OAAO,CAACgB,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACd,EAAE,IAAIA,EAAE,CAAC,CAAC;EACzE;EAEAe,QAAQA,CAACC,IAAU;IACjB,IAAI,CAACtB,cAAc,CAACc,UAAU,CAAC,iBAAiB,GAAGQ,IAAI,CAAChB,EAAE,GAAG,KAAK,CAAC;IACnE,OAAQX,EAAE,CAAE,IAAI,CAACQ,OAAO,CAACoB,IAAI,CAACD,IAAI,CAAC,CAAE;EACvC;EAEAE,WAAWA,CAACF,IAAS;IACnB,OAAQ3B,EAAE,CAAC,IAAI,CAACO,MAAM,CAACuB,GAAG,CACvBC,MAAM,IAAG;MACR,IAAGA,MAAM,CAACpB,EAAE,KAAKgB,IAAI,CAAChB,EAAE,EAAC;QACrB,IAAI,CAACN,cAAc,CAACc,UAAU,CAAC,oBAAoB,GAAGY,MAAM,CAACpB,EAAE,GAAG,KAAK,CAAC;QACxEoB,MAAM,CAACC,IAAI,GAAGL,IAAI,CAACK,IAAI;;MACxB;IACH,CAAC,CACF,CACF;EACH;EAEQZ,WAAWA,CAAIa,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACA;MAEA;MACA;MACA,IAAI,CAAC9B,cAAc,CAACc,UAAU,CAAC,MAAMc,SAAS,oBAAoBE,KAAK,CAACC,OAAO,EAAE,CAAC;MAElF;MACA,OAAOpC,EAAE,CAACkC,MAAW,CAAC;IACxB,CAAC;EACH;;AAjEW/B,WAAW,C;mBAAXA,WAAW,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;AAAXvC,WAAW,C;SAAXA,WAAW;EAAAwC,OAAA,EAAXxC,WAAW,CAAAyC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEP1C,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}